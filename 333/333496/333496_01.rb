require 'prime'

def A(n)
  return n if n.prime?
  k = 0
  while #true
    p k
    (2..n).to_a.repeated_combination(k){|c|
      if (1..k).inject(0){|s, j| s + 1r / c[j - 1]} == (n - 1r) / n
        p c + [n]
        return k + 1
      end
    }
    k += 1
  end
end
ary = []
(1..100).each{|i| 
  ary << A(i)
  p ary
}

# [
#   [2,  4,  4],
#   [2,  3,  6],
#   [2,  4,  8,  8],
#   [2,  6,  9,  9,  9],
#   [2,  5,  5, 10],
#   [2,  3, 12, 12],
#   [2,  7,  7,  7, 14],
#   [2,  3, 10, 15],
#   [2,  4,  8, 16, 16],
#   [2,  3,  9, 18],
#   [2,  4,  5, 20],
#   [2,  3, 14, 21, 21],
#   [2, 11, 11, 11, 11, 11, 22],
#   [2,  3,  8, 24],
#   [2,  4, 20, 25, 25, 25, 25, 25],
#   [2, 13, 13, 13, 13, 13, 13, 26],
#   [2,  3, 18, 27, 27, 27],
#   [2,  3, 12, 21, 28],
#   [2,  3, 10, 30, 30],
#   [2,  3, 16, 24, 32, 32],
#   [2,  3, 11, 22, 33],
#   [2, 17, 17, 17, 17, 17, 17, 17, 17, 34],
#   [2,  3, 14, 15, 35],
#   [2,  3,  9, 36, 36]
# ].each{|i| p i.inject(0){|s, j| s + 1r / j}}
